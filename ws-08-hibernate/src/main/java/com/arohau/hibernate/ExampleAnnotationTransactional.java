package com.arohau.hibernate;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityTransaction;
import jakarta.transaction.Transactional;

@Transactional
public class ExampleAnnotationTransactional {
    private EntityManager entityManager;

    // autogenerated wrapper at a runtime for Transactional methods
    public void transaction_someProcessing(EntityManager entityManager) {
        EntityTransaction transaction = entityManager.getTransaction();
        try {
            if (!transaction.isActive()) {
                transaction.begin();
            }
            someProcessing(entityManager);
            transaction.commit();
        } catch (Exception e) {
            transaction.rollback();
        }
    }    // autogenerated wrapper at a runtime for Transactional methods
    public void transaction_someProcessing2(EntityManager entityManager) {
        EntityTransaction transaction = entityManager.getTransaction();
        try {
            if (!transaction.isActive()) {
                transaction.begin();
            }
            someProcessing2(entityManager);
            transaction.commit();
        } catch (Exception e) {
            transaction.rollback();
        }
    }

    @Transactional
    public void someProcessing(EntityManager entityManager) {
        entityManager.persist(new Object());
        someProcessing2(entityManager);
    }

    @Transactional
    public void someProcessing2(EntityManager entityManager) {
        entityManager.persist(new Object());
    }

    public static void main(String[] args) {
        ExampleAnnotationTransactional example = new ExampleAnnotationTransactional();
        // someProcessing();
        example.transaction_someProcessing(example.entityManager);
    }
}
